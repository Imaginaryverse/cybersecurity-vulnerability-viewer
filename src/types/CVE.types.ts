import {
  AttackComplexityType,
  AttackVectorType,
  CiaType,
  ExploitCodeMaturityType,
  ReportConfidenceType,
  SeverityType,
} from './CVSS.enums';

type CveDescription = {
  lang: string;
  value: string;
};

type CveReference = {
  source: string;
  url: string;
  tags?: string[];
};

type CveWeakness = {
  description: CveDescription[];
  source: string;
  type: string;
};

type CvssDataObject = {
  [key: string]: string | number;
};

export type CVE = {
  /**
   * The CVE ID
   */
  id: string;
  /**
   * The date the CVE was last modified
   */
  lastModified: string;
  /**
   * The date the CVE was published
   */
  published: string;
  /**
   * The description of the CVE
   */
  descriptions: CveDescription[];
  /**
   * The references of the CVE
   */
  references: CveReference[];
  /**
   * The source identifier of the CVE
   */
  sourceIdentifier: string;
  /**
   * The status of the CVE
   */
  vulnStatus: string;
  /**
   * The metrics of the CVE
   */
  metrics: {
    cvssMetricV2?: {
      cvssData: CvssDataObject;
    }[];
    cvssMetricV3?: {
      cvssData: CvssDataObject;
    }[];
    cvssMetricV31?: {
      cvssData: CvssDataObject;
    }[];
  };
  /**
   * The weaknesses of the CVE
   */
  weaknesses: CveWeakness[];
};

export type ApiResponse = {
  format: string;
  resultsPerPage: number;
  startIndex: number;
  totalResults: number;
  timestamp: string;
  version: string;
  vulnerabilities: { cve: CVE }[];
};

type ParsedCvssData = {
  // BASE
  version: string; // same
  vectorString: string; // same
  baseSeverity: SeverityType; // only in v3

  // SCORES
  baseScore: number; // same
  temporalScore: number; // same
  environmentScore: number; // same

  // METRICS
  attackVector: AttackVectorType; // accessVector in v2
  attackComplexity: AttackComplexityType; // accessComplexity in v2
  confidentialityImpact: CiaType; // same
  integrityImpact: CiaType; // same
  availabilityImpact: CiaType; // same
  exploitCodeMaturity: ExploitCodeMaturityType; // exploitability in v2
  reportConfidence: ReportConfidenceType; // same
};

export type ParsedCve = {
  id: string;
  lastModified: string;
  published: string;
  description: string;
  references: CVE['references'];
  sourceIdentifier: string;
  vulnStatus: string;
  metrics?: ParsedCvssData;
  weaknesses: CVE['weaknesses'];
};

export type ParsedApiResponse = {
  format: string;
  resultsPerPage: number;
  maxPage: number;
  startIndex: number;
  totalResults: number;
  timestamp: string;
  version: string;
  cves: ParsedCve[];
};
