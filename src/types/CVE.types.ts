import { CvssDataV2 } from './CVSS_Data_V2.types';
import { CvssDataV3 } from './CVSS_Data_V3.types';
import { CvssDataV31 } from './CVSS_Data_V31.types';

type CveDescription = {
  lang: string;
  value: string;
};

type CveReference = {
  source: string;
  url: string;
  tags?: string[];
};

type CveWeakness = {
  description: CveDescription[];
  source: string;
  type: string;
};

export type CVE = {
  /**
   * The CVE ID
   */
  id: string;
  /**
   * The date the CVE was last modified
   */
  lastModified: string;
  /**
   * The date the CVE was published
   */
  published: string;
  /**
   * The description of the CVE
   */
  descriptions: CveDescription[];
  /**
   * The references of the CVE
   */
  references: CveReference[];
  /**
   * The source identifier of the CVE
   */
  sourceIdentifier: string;
  /**
   * The status of the CVE
   */
  vulnStatus: string;
  /**
   * The metrics of the CVE
   */
  metrics?: {
    cvssMetricV2?: {
      cvssData: CvssDataV2;
    }[];
    cvssMetricV3?: {
      cvssData: CvssDataV3;
    }[];
    cvssMetricV31?: {
      cvssData: CvssDataV31;
    }[];
  };
  /**
   * The weaknesses of the CVE
   */
  weaknesses: CveWeakness[];
};

export type ApiResponse = {
  format: string;
  resultsPerPage: number;
  startIndex: number;
  totalResults: number;
  timestamp: string;
  version: string;
  vulnerabilities: { cve: CVE }[];
};

export type ParsedMetric = {
  version: string; // essential
  vectorString: string; // essential
  baseScore: number; // essential
  baseSeverity: string; // essential (not available in v2, default to 'N/A')
  properties: {
    // other properties
    [key: string]: string | number;
  };
};

export type ParsedCve = {
  id: string;
  lastModified: string;
  published: string;
  descriptions: CVE['descriptions'];
  references: CVE['references'];
  sourceIdentifier: string;
  vulnStatus: string;
  metrics: ParsedMetric[];
  weaknesses: CVE['weaknesses'];
};

export type ParsedApiResponse = {
  format: string;
  resultsPerPage: number;
  maxPage: number;
  startIndex: number;
  totalResults: number;
  timestamp: string;
  version: string;
  cves: ParsedCve[];
};
