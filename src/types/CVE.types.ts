import {
  AttackComplexityType,
  AttackVectorType,
  CiaRequirementType,
  CiaType,
  ExploitCodeMaturityType,
  ReportConfidenceType,
  SeverityType,
} from './CVSS.enums';

type CveDescription = {
  lang: string;
  value: string;
};

type CveReference = {
  source: string;
  url: string;
  tags?: string[];
};

type CveWeakness = {
  description: CveDescription[];
  source: string;
  type: string;
};

type CveConfiguration = {
  nodes: {
    operator: string;
    negate: boolean;
    cpeMatch: {
      criteria: string;
      matchCriteriaId: string;
      vulnerable: boolean;
    }[];
  }[];
};

type CvssDataObject = {
  version: string; // same
  vectorString: string; // same
  baseScore: number; // same
  baseSeverity?: SeverityType; // v3
  accessVector?: AttackVectorType; // v2
  accessComplexity?: AttackComplexityType; // v2
  attackVector?: AttackVectorType; // v3
  attackComplexity?: AttackComplexityType; // v3
  confidentialityImpact: CiaType; // same
  integrityImpact: CiaType; // same
  availabilityImpact: CiaType; // same
  confidentialityRequirement?: CiaRequirementType; // same
  integrityRequirement?: CiaRequirementType; // same
  availabilityRequirement?: CiaRequirementType; // same
  exploitability?: ExploitCodeMaturityType; // v2
  exploitCodeMaturity?: ExploitCodeMaturityType; // v3
  reportConfidence?: ReportConfidenceType; // same
  temporalScore?: number; // same
  environmentalScore?: number; // same
};

type MetricsObject = {
  // BASE
  type: string; // same
  baseSeverity?: SeverityType; // v2

  // SCORES
  exploitabilityScore?: number; // unsure
  impactScore?: number; // unsure

  // METRICS
  cvssData: CvssDataObject;
};

export type CVE = {
  /**
   * The CVE ID
   */
  id: string;
  /**
   * The type of the CVE
   */
  type: string;
  /**
   * The date the CVE was last modified
   */
  lastModified: string;
  /**
   * The date the CVE was published
   */
  published: string;
  /**
   * The description of the CVE
   */
  descriptions: CveDescription[];
  /**
   * The references of the CVE
   */
  references: CveReference[];
  /**
   * The source identifier of the CVE
   */
  sourceIdentifier: string;
  /**
   * The status of the CVE
   */
  vulnStatus: string;
  /**
   * The metrics of the CVE
   */
  metrics: {
    cvssMetricV2?: MetricsObject[];
    cvssMetricV3?: MetricsObject[];
    cvssMetricV31?: MetricsObject[];
  };
  /**
   * The weaknesses of the CVE
   */
  weaknesses: CveWeakness[];
  /**
   * The configurations of the CVE
   */
  configurations: CveConfiguration[];
};

export type VectorItem = {
  name: string;
  value: string;
};

export type ApiResponse = {
  format: string;
  resultsPerPage: number;
  startIndex: number;
  totalResults: number;
  timestamp: string;
  version: string;
  vulnerabilities: { cve: CVE }[];
};

export type ParsedWeakness = {
  description: string;
  source: string;
  type: string;
};

export type ParsedMetrics = {
  // BASE
  version: string; // same
  type: string; // same
  vectorString: string; // same
  baseScore: number; // same
  baseSeverity: SeverityType; // in cvssData for v3, one level up for v2

  // VECTORS
  vectors: VectorItem[]; // same

  // SCORES
  scores: {
    temporalScore: number; // same
    environmentalScore: number; // same
    exploitabilityScore: number; // same
    impactScore: number; // same
  };
};

export type ParsedNode = {
  operator: string;
  negate: boolean;
  cpeMatch: {
    criteria: string;
    matchCriteriaId: string;
    vulnerable: boolean;
  };
};

export type ParsedCve = {
  id: string;
  lastModified: string;
  published: string;
  description: string;
  references: CVE['references'];
  sourceIdentifier: string;
  vulnStatus: string;
  metrics?: ParsedMetrics;
  weaknesses: ParsedWeakness[];
  configurations: ParsedNode[];
};

export type ParsedApiResponse = {
  format: string;
  resultsPerPage: number;
  maxPage: number;
  startIndex: number;
  totalResults: number;
  timestamp: string;
  version: string;
  cves: ParsedCve[];
};
