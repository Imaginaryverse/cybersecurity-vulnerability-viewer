export type CVE_CPE_Match = {
  criteria: string;
  matchCriteriaId: string;
  vulnerable: boolean;
  versionEndIncluding?: string;
};

export type CVE_Node = {
  cpeMatch: CVE_CPE_Match[];
  negate: boolean;
  operator: string;
};

export type CVE_Description = {
  lang: string;
  value: string;
};

export type CVSS_Data = {
  accessComplexity: string;
  accessVector: string;
  authentication: string;
  availabilityImpact: string;
  confidentialityImpact: string;
  integrityImpact: string;
  vectorString: string;
  version: string;
  baseScore: number;
};

export type CVSS_Metric_V2 = {
  acInsufInfo: boolean;
  baseSeverity: string;
  cvssData: CVSS_Data;
  exploitabilityScore: number;
  impactScore: number;
  obtainAllPrivilege: boolean;
  obtainOtherPrivilege: boolean;
  obtainUserPrivilege: boolean;
  source: string;
  type: string;
  userInteractionRequired: boolean;
};

export type CVE_Reference = {
  source: string;
  url: string;
  tags?: string[];
};

export type CVE_Weakness = {
  source: string;
  type: string;
  description: CVE_Description[];
};

export type CVE_Configuration = {
  nodes: CVE_Node[];
};

/**
 * CVE stands for Common Vulnerabilities and Exposures.
 */
export type CVE = {
  id: string;
  lastModified: Date;
  published: Date;
  sourceIdentifier: string;
  vulnStatus: string;
  descriptions: CVE_Description[];
  metrics: {
    cvssMetricV2: CVSS_Metric_V2[];
  };
  references: CVE_Reference[];
  weaknesses: CVE_Weakness[];
  configurations: CVE_Configuration[];
};

export type SearchResponse = {
  format: string;
  resultsPerPage: number;
  startIndex: number;
  totalResults: number;
  timestamp: Date;
  version: string;
  vulnerabilities: { cve: CVE }[];
};

export type Vulnerability = {
  id: string;
  lastModified: Date;
  published: Date;
  description?: string;
  baseSeverity: string; // refers to the severity of the vulnerability (string)
  baseScore: number; // refers to the severity of the vulnerability (number)
  accessComplexity: string; // refers to the complexity of the attack required to exploit the vulnerability
  accessVector: string; // refers to the attack vector of the vulnerability
  authentication: string; // refers to the authentication required to exploit the vulnerability
  availabilityImpact: string; // refers to the availability of the vulnerable component after a successful attack
  confidentialityImpact: string; // refers to the confidentiality of the information that is leaked due to the vulnerability
  integrityImpact: string; // refers to the integrity of the vulnerable component after a successful attack
  exploitabilityScore: number; // refers to the ease of exploitation of the vulnerability
  impactScore: number; // refers to the extent to which a successful attack can harm the user
  type: string; // refers to the type of vulnerability
  userInteractionRequired: boolean; // refers to the attacker's ability to interact with the affected system to exploit the vulnerability
  obtainAllPrivilege: boolean; // refers to the attacker's ability to obtain all privileges granted to the application
  obtainOtherPrivilege: boolean; // refers to the attacker's ability to obtain privileges that are not normally granted to the application
  obtainUserPrivilege: boolean; // refers to the attacker's ability to obtain privileges that are normally granted to the application
  weaknesses: string[]; // refers to the weaknesses of the vulnerability
  source: string; // refers to the source of the vulnerability
  sourceIdentifier: string; // refers to the source identifier of the vulnerability (string)
  references: CVE_Reference[]; // refers to the references of the vulnerability
};

export type ParsedSearchResponse = {
  resultsPerPage: number;
  totalResults: number;
  maxPage: number;
  startIndex: number;
  vulnerabilities: Vulnerability[];
};
