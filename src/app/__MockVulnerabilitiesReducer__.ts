import { ParsedApiResponse } from '../types/CVE.types';
import { VulnerabilitiesProviderState } from './__mockTypes__';

type VulnerabilitiesProviderAction =
  | { type: 'FETCHING_CVES' }
  | {
      type: 'FETCHING_CVES_SUCCESS';
      data: ParsedApiResponse;
    }
  | { type: 'FETCHING_CVES_ERROR'; error: Error }
  | { type: 'FETCHING_CVES_48HOURS' }
  | {
      type: 'FETCHING_CVES_48HOURS_SUCCESS';
      data: ParsedApiResponse;
    }
  | { type: 'FETCHING_CVES_48HOURS_ERROR'; error: Error }
  | { type: 'FETCHING_CVE' }
  | {
      type: 'FETCHING_CVE_SUCCESS';
      data: ParsedApiResponse;
    }
  | { type: 'FETCHING_CVE_ERROR'; error: Error };

export const MockVulnerabilitiesReducer = (
  state: VulnerabilitiesProviderState,
  action: VulnerabilitiesProviderAction
): VulnerabilitiesProviderState => {
  switch (action.type) {
    case 'FETCHING_CVES':
      return { ...state, isLoadingCves: true, errorLoadingCves: null };
    case 'FETCHING_CVES_SUCCESS':
      return {
        ...state,
        cves: action.data,
        isLoadingCves: false,
        errorLoadingCves: null,
      };
    case 'FETCHING_CVES_ERROR':
      return { ...state, isLoadingCves: false, errorLoadingCves: action.error };

    case 'FETCHING_CVES_48HOURS':
      return {
        ...state,
        isLoadingCves48hours: true,
        errorLoadingCves48hours: null,
      };
    case 'FETCHING_CVES_48HOURS_SUCCESS':
      return {
        ...state,
        cves48hours: action.data,
        isLoadingCves48hours: false,
        errorLoadingCves48hours: null,
      };
    case 'FETCHING_CVES_48HOURS_ERROR':
      return {
        ...state,
        isLoadingCves48hours: false,
        errorLoadingCves48hours: action.error,
      };

    case 'FETCHING_CVE':
      return { ...state, isLoadingCve: true, errorLoadingCve: null };
    case 'FETCHING_CVE_SUCCESS':
      return {
        ...state,
        cve: action.data,
        isLoadingCve: false,
        errorLoadingCve: null,
      };
    case 'FETCHING_CVE_ERROR':
      return { ...state, isLoadingCve: false, errorLoadingCve: action.error };

    default:
      return state;
  }
};
