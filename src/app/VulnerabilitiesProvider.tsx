/* eslint-disable @typescript-eslint/no-empty-function */
import { FunctionComponent, createContext, useEffect, useState } from 'react';
import { useQuery } from 'react-query';
import { ParsedSearchResponse, SearchResponse } from '../types';
import axios from 'axios';
import { isValidKeyword } from '../utils/stringUtils';
import { parseCVE } from '../utils/cveParser';

const baseURL = 'https://services.nvd.nist.gov/rest/json/cves/2.0';

type VulnerabilitiesContextType = {
  keyword: string;
  setKeyword: (keyword: string) => void;
  pageIndex: number;
  setPageIndex: (pageIndex: number) => void;
  isLoading: boolean;
  error: Error | null;
  data: ParsedSearchResponse | null;
  isPreviousData: boolean;
};

async function fetchVulnerabilities(
  keyword: string,
  pageIndex: number
): Promise<ParsedSearchResponse> {
  const searchQuery = `keywordSearch=${keyword}&resultsPerPage=10&startIndex=${pageIndex}`;

  const { data } = await axios.get<SearchResponse>(`${baseURL}?${searchQuery}`);

  const parsedData: ParsedSearchResponse = {
    ...data,
    maxPage: Math.ceil(data.totalResults / data.resultsPerPage),
    vulnerabilities: data.vulnerabilities.map(v => parseCVE(v.cve)),
  };

  return parsedData;
}

export const VulnerabilitiesContext = createContext<VulnerabilitiesContextType>(
  {
    keyword: '',
    setKeyword: () => {},
    pageIndex: 0,
    setPageIndex: () => {},
    isLoading: false,
    error: null,
    data: null,
    isPreviousData: false,
  }
);

type VulnerabilitiesProviderProps = {
  children: React.ReactNode;
};

export const VulnerabilitiesProvider: FunctionComponent<
  VulnerabilitiesProviderProps
> = ({ children }) => {
  const [keyword, setKeyword] = useState<string>('');
  const [pageIndex, setPageIndex] = useState<number>(0);

  const {
    isLoading,
    isFetching,
    error,
    data = null,
    isPreviousData,
    refetch,
  } = useQuery<ParsedSearchResponse, Error>(
    ['vulnerabilities', keyword, pageIndex],
    () => fetchVulnerabilities(keyword, pageIndex),
    {
      keepPreviousData: true,
      enabled: false,
    }
  );

  useEffect(() => {
    if (!isValidKeyword(keyword)) {
      return;
    }

    refetch();
  }, [keyword, pageIndex, refetch]);

  return (
    <VulnerabilitiesContext.Provider
      value={{
        keyword,
        setKeyword,
        pageIndex,
        setPageIndex,
        isLoading: isLoading || isFetching,
        error,
        data,
        isPreviousData,
      }}
    >
      {children}
    </VulnerabilitiesContext.Provider>
  );
};
