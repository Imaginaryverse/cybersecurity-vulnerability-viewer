/* 
  Alternate version using React Context
*/

/* eslint-disable @typescript-eslint/no-empty-function */

const BASE_URL = 'https://services.nvd.nist.gov/rest/json/cves/2.0';

import React, {
  FunctionComponent,
  createContext,
  useContext,
  useReducer,
  useCallback,
  useRef,
} from 'react';
import { ParsedApiResponse } from '../types/CVE.types';
import { serializeSearchParams } from '../utils/stringUtils';
import { parseApiResponse } from '../utils/responseParser';
import { TimeSpanType } from '../types/TimeSpan.types';
import axios from 'axios';
import { getCveQueryPubStartDate } from '../utils/dateUtils';
import {
  VulnerabilitiesContextType,
  VulnerabilitiesProviderProps,
  VulnerabilitiesProviderState,
} from './__mockTypes__';
import { MockVulnerabilitiesReducer } from './__MockVulnerabilitiesReducer__';

const VulnerabilitiesContext = createContext<VulnerabilitiesContextType>({
  cves: undefined,
  fetchCves: () => {},
  isLoadingCves: false,
  errorLoadingCves: null,

  cves48hours: undefined,
  fetchCves48hours: () => {},
  isLoadingCves48hours: false,
  errorLoadingCves48hours: null,

  cve: undefined,
  fetchCve: () => {},
  isLoadingCve: false,
  errorLoadingCve: null,
});

const initialState: VulnerabilitiesProviderState = {
  cves: undefined,
  isLoadingCves: false,
  errorLoadingCves: null,

  cves48hours: undefined,
  isLoadingCves48hours: false,
  errorLoadingCves48hours: null,

  cve: undefined,
  isLoadingCve: false,
  errorLoadingCve: null,
};

type QueryCache = Record<
  string,
  {
    queryParams: string;
    data: ParsedApiResponse;
  }[]
>;

const getCachedData = (
  cache: QueryCache,
  cacheKey: string,
  queryParams: string
) => {
  return (
    cache[cacheKey]?.find(item => item.queryParams === queryParams)?.data ||
    null
  );
};

export const VulnerabilitiesProvider: FunctionComponent<
  VulnerabilitiesProviderProps
> = ({ children }) => {
  const [state, dispatch] = useReducer(
    MockVulnerabilitiesReducer,
    initialState
  );
  const cache = useRef<QueryCache>({});

  const fetchCves = useCallback(
    async (keyword: string, timeSpan: TimeSpanType, pageIdx: number) => {
      const now = new Date();
      const startOfToday = new Date(
        now.getFullYear(),
        now.getMonth(),
        now.getDate()
      );
      const pubStartDate = getCveQueryPubStartDate(timeSpan, startOfToday);
      const pubEndDate = !pubStartDate ? undefined : startOfToday;

      const queryParams = serializeSearchParams(
        {
          keywordSearch: keyword,
          startIndex: pageIdx,
          pubStartDate: pubStartDate?.toISOString(),
          pubEndDate: pubEndDate?.toISOString(),
          resultsPerPage: 200,
        },
        { removeFalsy: [undefined] }
      );
      const cachedData = getCachedData(cache.current, 'cves', queryParams);

      if (cachedData) {
        dispatch({
          type: 'FETCHING_CVES_SUCCESS',
          data: cachedData,
        });

        return;
      }

      dispatch({ type: 'FETCHING_CVES' });

      try {
        const res = await axios.get(`${BASE_URL}?${queryParams}`);

        const parsedData = parseApiResponse(res.data);

        if (!cache.current.cves) {
          cache.current.cves = [];
        }

        cache.current.cves.push({
          queryParams,
          data: parsedData,
        });

        dispatch({
          type: 'FETCHING_CVES_SUCCESS',
          data: parsedData,
        });
      } catch (error) {
        dispatch({
          type: 'FETCHING_CVES_ERROR',
          error: error instanceof Error ? error : new Error('Unknown error'),
        });
      }
    },
    []
  );

  const fetchCves48hours = useCallback(async (pageIdx: number) => {
    const now = new Date();
    const currentHourDate = new Date(
      now.getFullYear(),
      now.getMonth(),
      now.getDate(),
      now.getHours()
    );
    const pubStartDate = getCveQueryPubStartDate(
      'Last 48 Hours',
      currentHourDate
    );
    const pubEndDate = !pubStartDate ? undefined : currentHourDate;

    const queryParams = serializeSearchParams(
      {
        pubStartDate: pubStartDate?.toISOString(),
        pubEndDate: pubEndDate?.toISOString(),
        resultsPerPage: 200,
        startIndex: pageIdx,
      },
      { removeFalsy: [undefined] }
    );

    const cachedData = getCachedData(cache.current, 'cves48hours', queryParams);

    if (cachedData) {
      dispatch({
        type: 'FETCHING_CVES_48HOURS_SUCCESS',
        data: cachedData,
      });

      return;
    }

    dispatch({ type: 'FETCHING_CVES_48HOURS' });

    try {
      const res = await axios.get(`${BASE_URL}?${queryParams}`);

      const parsedData = parseApiResponse(res.data);

      if (!cache.current.cves48hours) {
        cache.current.cves48hours = [];
      }

      cache.current.cves48hours.push({
        queryParams,
        data: parsedData,
      });

      dispatch({
        type: 'FETCHING_CVES_48HOURS_SUCCESS',
        data: parsedData,
      });
    } catch (error) {
      dispatch({
        type: 'FETCHING_CVES_48HOURS_ERROR',
        error: error instanceof Error ? error : new Error('Unknown error'),
      });
    }
  }, []);

  const fetchCve = useCallback(async (cveId: string) => {
    const queryParams = serializeSearchParams({
      cveId,
    });
    const cachedData = getCachedData(cache.current, 'cve', queryParams);

    if (cachedData) {
      dispatch({
        type: 'FETCHING_CVE_SUCCESS',
        data: cachedData,
      });

      return;
    }

    dispatch({ type: 'FETCHING_CVE' });

    try {
      const res = await axios.get(`${BASE_URL}?${queryParams}`);

      const parsedData = parseApiResponse(res.data);

      if (!cache.current.cve) {
        cache.current.cve = [];
      }

      cache.current.cve.push({
        queryParams,
        data: parsedData,
      });

      dispatch({
        type: 'FETCHING_CVE_SUCCESS',
        data: parsedData,
      });
    } catch (error) {
      dispatch({
        type: 'FETCHING_CVE_ERROR',
        error: error instanceof Error ? error : new Error('Unknown error'),
      });
    }
  }, []);

  return (
    <VulnerabilitiesContext.Provider
      value={{
        cves: state.cves,
        fetchCves,
        isLoadingCves: state.isLoadingCves,
        errorLoadingCves: state.errorLoadingCves,

        cves48hours: state.cves48hours,
        fetchCves48hours,
        isLoadingCves48hours: state.isLoadingCves48hours,
        errorLoadingCves48hours: state.errorLoadingCves48hours,

        cve: state.cve,
        fetchCve,
        isLoadingCve: state.isLoadingCve,
        errorLoadingCve: state.errorLoadingCve,
      }}
    >
      {children}
    </VulnerabilitiesContext.Provider>
  );
};

export const useVulnerabilities = () => useContext(VulnerabilitiesContext);
