import {
  serializeSearchParams,
  isValidKeyword,
  camelCaseToTitleCase,
} from '../../utils/stringUtils';

describe('serializeSearchParams', () => {
  describe('when given an object with a single key-value pair', () => {
    it('returns a query string', () => {
      const params = { foo: 'bar' };
      const result = serializeSearchParams(params);
      expect(result).toBe('foo=bar');
    });
  });

  describe('when given an object with multiple key-value pairs', () => {
    it('returns a query string', () => {
      const params = { foo: 'bar', baz: 'qux' };
      const result = serializeSearchParams(params);
      expect(result).toBe('foo=bar&baz=qux');
    });
  });

  describe('when given an object with a null value', () => {
    it('returns a query string', () => {
      const params = { foo: null };
      const result = serializeSearchParams(params);
      expect(result).toBe('foo=null');
    });
  });

  describe('when given an object with an undefined value', () => {
    it('returns a query string', () => {
      const params = { foo: undefined };
      const result = serializeSearchParams(params);
      expect(result).toBe('foo=undefined');
    });
  });

  describe('when given an object with a boolean value', () => {
    it('returns a query string', () => {
      const params = { foo: true };
      const result = serializeSearchParams(params);
      expect(result).toBe('foo=true');
    });
  });

  describe('when given an object with a number value', () => {
    it('returns a query string', () => {
      const params = { foo: 1 };
      const result = serializeSearchParams(params);
      expect(result).toBe('foo=1');
    });
  });

  describe('when removeFalsy includes undefined', () => {
    it('removes undefined values from the query string', () => {
      const params = { foo: undefined };
      const result = serializeSearchParams(params, {
        removeFalsy: [undefined],
      });
      expect(result).toBe('');
    });
  });

  describe('when removeFalsy includes null', () => {
    it('removes null values from the query string', () => {
      const params = { foo: null };
      const result = serializeSearchParams(params, { removeFalsy: [null] });
      expect(result).toBe('');
    });
  });

  describe('when removeFalsy includes "" (empty string)', () => {
    it('removes empty string values from the query string', () => {
      const params = { foo: '' };
      const result = serializeSearchParams(params, { removeFalsy: [''] });
      expect(result).toBe('');
    });
  });

  describe('when removeFalsy includes 0 (zero)', () => {
    it('removes zero values from the query string', () => {
      const params = { foo: 0 };
      const result = serializeSearchParams(params, { removeFalsy: [0] });
      expect(result).toBe('');
    });
  });

  describe('when removeFalsy includes false', () => {
    it('removes false values from the query string', () => {
      const params = { foo: false };
      const result = serializeSearchParams(params, { removeFalsy: [false] });
      expect(result).toBe('');
    });
  });

  describe('when given an empty object', () => {
    it('returns an empty string', () => {
      const params = {};
      const result = serializeSearchParams(params);
      expect(result).toBe('');
    });
  });
});

describe('isValidKeyword', () => {
  describe('when given a string with at least 3 characters long', () => {
    it('returns true', () => {
      const result = isValidKeyword('foo');
      expect(result).toBe(true);
    });
  });

  describe('when given a string with less than 3 characters characters', () => {
    it('returns false', () => {
      const result = isValidKeyword('fo');
      expect(result).toBe(false);
    });
  });

  describe('when given an empty string', () => {
    it('returns false', () => {
      const result = isValidKeyword('');
      expect(result).toBe(false);
    });
  });

  describe('when given a string with only whitespace characters', () => {
    it('returns false', () => {
      const result = isValidKeyword('   ');
      expect(result).toBe(false);
    });
  });
});

describe('camelCaseToTitleCase', () => {
  describe('when given a camelCase string', () => {
    it('returns a Title Case string', () => {
      const result = camelCaseToTitleCase('fooBarBaz');
      expect(result).toBe('Foo Bar Baz');
    });
  });

  describe('when given a camelCase string with numbers', () => {
    it('returns a Title Case string', () => {
      const result = camelCaseToTitleCase('foo2Bar3Baz4');
      expect(result).toBe('Foo 2 Bar 3 Baz 4');
    });
  });

  describe('when given a string with no camelCase characters', () => {
    it('returns the original string', () => {
      const result = camelCaseToTitleCase('foo bar baz');
      expect(result).toBe('Foo bar baz');
    });
  });
});
