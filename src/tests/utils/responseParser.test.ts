import {
  parseMetrics,
  parseWeakness,
  parseConfiguration,
  parseCve,
} from '../../utils/responseParser';
import { raw_cve_1 } from '../data/raw_cve_1';
import { CVE, CveWeakness, CveConfiguration } from '../../types/CVE.types';
import {
  parsedCveMetrics1,
  parsedCveWeakness1,
  parsedCveConfiguration1,
  parsedFullCve1,
} from '../data/parsed_cve_1';

describe('parseMetrics', () => {
  describe('when given valid metrics', () => {
    it('returns the expected metrics', () => {
      const parsed = parseMetrics(raw_cve_1.metrics as CVE['metrics']);

      expect(parsed).toEqual(parsedCveMetrics1);
    });
  });

  describe('when given invalid metrics', () => {
    it('returns undefined', () => {
      const parsed = parseMetrics({} as CVE['metrics']);

      expect(parsed).toBeUndefined();
    });
  });
});

describe('parseWeakness', () => {
  describe('when given valid weakness', () => {
    it('returns the expected weakness', () => {
      const parsed = parseWeakness(raw_cve_1.weaknesses[0]);

      expect(parsed).toEqual(parsedCveWeakness1);
    });
  });

  describe('when given invalid weakness', () => {
    it('returns undefined', () => {
      const parsed = parseWeakness({} as CveWeakness);

      expect(parsed).toBeUndefined();
    });
  });
});

describe('parseConfiguration', () => {
  describe('when given valid configuration', () => {
    it('returns the expected configuration', () => {
      const parsed = parseConfiguration(raw_cve_1.configurations[0]);

      expect(parsed).toEqual(parsedCveConfiguration1);
    });
  });

  describe('when given invalid configuration', () => {
    it('returns undefined', () => {
      const parsed = parseConfiguration({} as CveConfiguration);

      expect(parsed).toBeUndefined();
    });
  });
});

describe('parseCve', () => {
  describe('when given valid cve', () => {
    it('returns the expected cve', () => {
      const parsed = parseCve(raw_cve_1 as CVE);

      expect(parsed).toEqual(parsedFullCve1);
    });
  });

  describe('when given invalid cve', () => {
    it('throws an error', () => {
      expect(() => parseCve({} as CVE)).toThrowError();
    });
  });
});
