import {
  toHumanReadableDate,
  getCveQueryPubStartDate,
} from '../../utils/dateUtils';
import { TimeSpan } from '../../types/TimeSpan.enum';

describe('toHumanReadableDate', () => {
  describe('when date is not a valid ISO date', () => {
    it('returns the date', () => {
      const date = 'invalid date';
      expect(toHumanReadableDate(date)).toEqual(date);
    });
  });

  describe('when date is a valid ISO date', () => {
    it('returns the date in YYYY-MM-DD format', () => {
      const date = '2020-01-01';
      expect(toHumanReadableDate(date)).toEqual('2020-01-01');
    });
  });

  describe('when date is a valid ISO date and includeTime is true', () => {
    it('returns the date in YYYY-MM-DD HH:MM:SS format', () => {
      const date = '2020-01-01T00:00:00.000Z';
      expect(toHumanReadableDate(date, true)).toEqual('2020-01-01 00:00:00');
    });
  });

  describe('when date is a valid ISO date and includeTime is true and date is not UTC', () => {
    it('returns the date in YYYY-MM-DD HH:MM:SS format', () => {
      const date = '2020-01-01T00:00:00.000-05:00';
      expect(toHumanReadableDate(date, true)).toEqual('2020-01-01 00:00:00');
    });
  });
});

describe('getCveQueryPubStartDate', () => {
  describe('when timeSpan is Last24Hours', () => {
    it('returns the correct date', () => {
      const now = new Date('2020-01-01T00:00:00.000Z');
      expect(getCveQueryPubStartDate(TimeSpan.Last24Hours, now)).toEqual(
        new Date('2019-12-31T00:00:00.000Z')
      );
    });
  });

  describe('when timeSpan is Last48Hours', () => {
    it('returns the correct date', () => {
      const now = new Date('2020-01-01T00:00:00.000Z');
      expect(getCveQueryPubStartDate(TimeSpan.Last48Hours, now)).toEqual(
        new Date('2019-12-30T00:00:00.000Z')
      );
    });
  });

  describe('when timeSpan is Last7Days', () => {
    it('returns the correct date', () => {
      const now = new Date('2020-01-01T00:00:00.000Z');
      expect(getCveQueryPubStartDate(TimeSpan.Last7Days, now)).toEqual(
        new Date('2019-12-25T00:00:00.000Z')
      );
    });
  });

  describe('when timeSpan is Last30Days', () => {
    it('returns the correct date', () => {
      const now = new Date('2020-01-01T00:00:00.000Z');
      expect(getCveQueryPubStartDate(TimeSpan.Last30Days, now)).toEqual(
        new Date('2019-12-02T00:00:00.000Z')
      );
    });
  });

  describe('when timeSpan is Last90Days', () => {
    it('returns the correct date', () => {
      const now = new Date('2020-01-01T00:00:00.000Z');
      expect(getCveQueryPubStartDate(TimeSpan.Last90Days, now)).toEqual(
        new Date('2019-10-03T00:00:00.000Z')
      );
    });
  });

  describe('when timeSpan is Last120Days', () => {
    it('returns the correct date', () => {
      const now = new Date('2020-01-01T00:00:00.000Z');
      expect(getCveQueryPubStartDate(TimeSpan.Last120Days, now)).toEqual(
        new Date('2019-09-03T00:00:00.000Z')
      );
    });
  });

  describe('when timeSpan is an invalid value', () => {
    it('throws an error', () => {
      const now = new Date('2020-01-01T00:00:00.000Z');
      expect(() =>
        getCveQueryPubStartDate('invalid' as TimeSpan, now)
      ).toThrowError('Invalid time span');
    });
  });
});
