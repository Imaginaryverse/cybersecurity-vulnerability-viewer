import { useQuery } from 'react-query';
import {
  fetchCveById,
  fetchCves,
  fetchCvesByKeyword,
  fetchCvesByTimeSpan,
} from '../api';
import { ParsedApiResponse, ParsedCve } from '../../types/CVE.types';
import { TimeSpanType } from '../../types/TimeSpan.types';

/**
 * Hook to fetch CVE by id
 * @param id CVE id
 */
export function useCveByIdQuery(id: string) {
  const { isLoading, isFetching, error, data, refetch } = useQuery<
    ParsedCve,
    Error
  >(['cve', id], () => fetchCveById(id), {
    enabled: false,
  });

  return {
    isLoading,
    isFetching,
    error,
    data,
    refetch,
  };
}

/**
 * Hook to fetch CVEs by keyword and time span.
 * If time span is 'allTime', it will fetch all CVEs by keyword.
 * @param keyword CVE keyword
 * @param timeSpan CVE time span
 * @param pageIndex Page index
 */
export function useCvesByKeywordAndTimeSpanQuery(args: {
  keyword: string;
  timeSpan: TimeSpanType;
  pageIndex: number;
}) {
  const { isLoading, isFetching, error, data, refetch, isPreviousData } =
    useQuery<ParsedApiResponse, Error>(
      ['cves', args.keyword, args.timeSpan, args.pageIndex],
      () => fetchCves(args.keyword, args.timeSpan, args.pageIndex),
      {
        enabled: false,
        staleTime: Infinity,
      }
    );

  return {
    isLoading,
    isFetching,
    error,
    data,
    refetch,
    isPreviousData,
  };
}

/**
 * Hook to fetch CVEs by keyword
 * @param keyword CVE keyword
 * @param pageIndex Page index
 */
export function useCvesByKeywordQuery(args: {
  keyword: string;
  pageIndex: number;
}) {
  const { isLoading, isFetching, error, data, refetch, isPreviousData } =
    useQuery<ParsedApiResponse, Error>(
      ['cves', args.keyword, args.pageIndex],
      () => fetchCvesByKeyword(args.keyword, args.pageIndex),
      {
        enabled: false,
        staleTime: Infinity,
      }
    );

  return {
    isLoading,
    isFetching,
    error,
    data,
    refetch,
    isPreviousData,
  };
}

/**
 * Hook to fetch CVEs by time span
 * @param timeSpan CVE time span
 * @param pageIndex Page index
 */
export function useCvesByTimeSpanQuery(args: {
  timeSpan: TimeSpanType;
  pageIndex: number;
}) {
  const { isLoading, isFetching, error, data, refetch, isPreviousData } =
    useQuery<ParsedApiResponse, Error>(
      ['cves', args.timeSpan, args.pageIndex],
      () => fetchCvesByTimeSpan(args.timeSpan, args.pageIndex),
      {
        enabled: false,
        staleTime: Infinity,
      }
    );

  return {
    isLoading,
    isFetching,
    error,
    data,
    refetch,
    isPreviousData,
  };
}
