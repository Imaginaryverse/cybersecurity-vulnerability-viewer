import axios from 'axios';
import { ParsedSearchResponse, SearchResponse, Vulnerability } from '../types';
import { parseCVE } from '../utils/cveParser';

const BASE_URL = 'https://services.nvd.nist.gov/rest/json/cves/2.0';

export async function fetchCveById(id: string): Promise<Vulnerability> {
  const { data } = await axios.get<SearchResponse>(`${BASE_URL}?cveId=${id}`);

  if (!data?.vulnerabilities[0]?.cve) {
    throw new Error(`Could not find CVE with ID "${id}"`);
  }

  return parseCVE(data.vulnerabilities[0].cve);
}

export async function fetchCvesByKeyword(
  keyword: string,
  pageIndex: number
): Promise<ParsedSearchResponse> {
  const searchQuery = `keywordSearch=${keyword}&resultsPerPage=10&startIndex=${pageIndex}`;
  const { data } = await axios.get<SearchResponse>(
    `${BASE_URL}?${searchQuery}`
  );

  if (!data?.vulnerabilities?.length) {
    throw new Error(`Could not find CVEs for "${keyword}"`);
  }

  const parsedData: ParsedSearchResponse = {
    ...data,
    maxPage: Math.ceil(data.totalResults / data.resultsPerPage),
    vulnerabilities: data.vulnerabilities.map(v => parseCVE(v.cve)),
  };

  return parsedData;
}
