import axios from 'axios';
import { parseApiResponse, parseCve } from '../utils/responseParser';
import { ApiResponse, ParsedApiResponse, ParsedCve } from '../types/CVE.types';
import { TimeSpan } from '../types/TimeSpan.enum';
import { getCveQueryPubStartDate } from '../utils/dateUtils';

const BASE_URL = 'https://services.nvd.nist.gov/rest/json/cves/2.0';

export async function fetchCveById(id: string): Promise<ParsedCve> {
  const { data } = await axios.get<ApiResponse>(`${BASE_URL}?cveId=${id}`);

  if (!data?.vulnerabilities[0]?.cve) {
    throw new Error(`Could not find CVE with ID "${id}"`);
  }

  return parseCve(data.vulnerabilities[0].cve);
}

export async function fetchCvesByKeyword(
  keyword: string,
  pageIndex: number
): Promise<ParsedApiResponse> {
  const searchQuery = `keywordSearch=${keyword}&resultsPerPage=50&startIndex=${pageIndex}`;
  const { data } = await axios.get<ApiResponse>(`${BASE_URL}?${searchQuery}`);

  if (!data?.vulnerabilities?.length) {
    throw new Error(`Could not find CVEs for "${keyword}"`);
  }

  const parsed = parseApiResponse(data);

  return parsed;
}

export async function fetchCvesByTimeSpan(
  timeSpan: TimeSpan,
  pageIndex: number
): Promise<ParsedApiResponse> {
  const now = new Date();
  const startDate = getCveQueryPubStartDate(timeSpan, now);
  const searchQuery = `pubStartDate=${startDate.toISOString()}&pubEndDate=${now.toISOString()}&resultsPerPage=50&startIndex=${pageIndex}`;
  const { data } = await axios.get<ApiResponse>(`${BASE_URL}?${searchQuery}`);

  if (!data?.vulnerabilities?.length) {
    throw new Error(`Could not find CVEs for "${timeSpan}"`);
  }

  const parsed = parseApiResponse(data, {
    sortBy: 'published',
    sortOrder: 'desc',
  });

  return parsed;
}
