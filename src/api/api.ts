import axios from 'axios';
import { parseApiResponse, parseCve } from '../utils/responseParser';
import { ApiResponse, ParsedApiResponse, ParsedCve } from '../types/CVE.types';
import { TimeSpanType } from '../types/TimeSpan.types';
import { getCveQueryPubStartDate } from '../utils/dateUtils';
import { serializeSearchParams } from '../utils/stringUtils';

const BASE_URL = 'https://services.nvd.nist.gov/rest/json/cves/2.0';

export async function fetchCveById(id: string): Promise<ParsedCve> {
  try {
    const { data } = await axios.get<ApiResponse>(`${BASE_URL}?cveId=${id}`);

    if (!data?.vulnerabilities[0]?.cve) {
      throw new Error(`Could not find CVE with ID "${id}"`);
    }

    return parseCve(data.vulnerabilities[0].cve);
  } catch (error) {
    throw new Error(`Could not find CVE with ID "${id}"`);
  }
}

export async function fetchCves(
  keyword: string,
  timeSpan: TimeSpanType,
  pageIndex: number
): Promise<ParsedApiResponse> {
  const now = new Date();
  const query = {
    keywordSearch: keyword,
    pubStartDate: getCveQueryPubStartDate(timeSpan, now)?.toISOString(),
    pubEndDate: timeSpan !== 'All Time' ? now.toISOString() : undefined,
    resultsPerPage: 50,
    startIndex: pageIndex,
  };
  const queryString = serializeSearchParams(query, {
    removeFalsy: [undefined, ''],
  });

  try {
    const { data } = await axios.get<ApiResponse>(`${BASE_URL}?${queryString}`);

    if (!data?.vulnerabilities?.length) {
      throw new Error(
        `No results found for "${keyword}" and selected time period`
      );
    }

    const parsed = parseApiResponse(data);
    return parsed;
  } catch (error) {
    throw new Error(
      `No results found for "${keyword}" and selected time period`
    );
  }
}

export async function fetchCvesByKeyword(
  keyword: string,
  pageIndex: number
): Promise<ParsedApiResponse> {
  const searchQuery = `keywordSearch=${keyword}&resultsPerPage=50&startIndex=${pageIndex}`;

  try {
    const { data } = await axios.get<ApiResponse>(`${BASE_URL}?${searchQuery}`);

    if (!data?.vulnerabilities?.length) {
      throw new Error(`No results for "${keyword}"`);
    }

    const parsed = parseApiResponse(data);
    return parsed;
  } catch (error) {
    throw new Error(`No results for "${keyword}"`);
  }
}

export async function fetchCvesByTimeSpan(
  timeSpan: TimeSpanType,
  pageIndex: number
): Promise<ParsedApiResponse> {
  const now = new Date();
  const startDate = getCveQueryPubStartDate(timeSpan, now);

  try {
    if (!startDate) {
      throw new Error(`invalid timeSpan "${timeSpan}"`);
    }

    const searchQuery = `pubStartDate=${startDate.toISOString()}&pubEndDate=${now.toISOString()}&resultsPerPage=50&startIndex=${pageIndex}`;
    const { data } = await axios.get<ApiResponse>(`${BASE_URL}?${searchQuery}`);

    if (!data?.vulnerabilities?.length) {
      throw new Error(`No results for "${timeSpan}"`);
    }

    const parsed = parseApiResponse(data, {
      sortBy: 'published',
      sortOrder: 'desc',
    });
    return parsed;
  } catch (error) {
    throw new Error(`No results for "${timeSpan}"`);
  }
}
