import { FunctionComponent, useState, useCallback } from 'react';
import {
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  TableSortLabel,
} from '@mui/material';
import { useNavigate } from 'react-router-dom';

import { ParsedCve } from '../../types/CVE.types';
import { toHumanReadableDate } from '../../utils/dateUtils';

type SearchResultsTableProps = {
  cves: ParsedCve[];
};

type Order = 'asc' | 'desc';

type OrderBy = 'id' | 'baseScore' | 'lastModified' | 'published';

type HeadCell = {
  id: OrderBy;
  label: string;
};

const headCells: HeadCell[] = [
  { id: 'id', label: 'ID' },
  { id: 'baseScore', label: 'Score' },
  { id: 'lastModified', label: 'Modified' },
  { id: 'published', label: 'Published' },
];

function stableSortCves(cves: ParsedCve[], order: Order, orderBy: OrderBy) {
  return cves.sort((a, b) => {
    if (orderBy === 'id') {
      const aId = a.id;
      const bId = b.id;

      return order === 'asc' ? aId.localeCompare(bId) : bId.localeCompare(aId);
    }

    if (orderBy === 'baseScore') {
      const aBaseScore = a.metrics?.baseScore ?? 0;
      const bBaseScore = b.metrics?.baseScore ?? 0;

      return order === 'asc'
        ? aBaseScore - bBaseScore
        : bBaseScore - aBaseScore;
    }

    if (orderBy === 'lastModified') {
      const aLastModified = a.lastModified ?? '';
      const bLastModified = b.lastModified ?? '';

      return order === 'asc'
        ? aLastModified.localeCompare(bLastModified)
        : bLastModified.localeCompare(aLastModified);
    }

    if (orderBy === 'published') {
      const aPublished = a.published ?? '';
      const bPublished = b.published ?? '';

      return order === 'asc'
        ? aPublished.localeCompare(bPublished)
        : bPublished.localeCompare(aPublished);
    }

    return 0;
  });
}

type EnhancedTableHeadProps = {
  order: Order;
  orderBy: OrderBy;
  onRequestSort: (event: React.MouseEvent<unknown>, property: OrderBy) => void;
};

const EnhancedTableHead: FunctionComponent<EnhancedTableHeadProps> = ({
  order,
  orderBy,
  onRequestSort,
}) => {
  const createSortHandler =
    (property: OrderBy) => (event: React.MouseEvent<unknown>) => {
      onRequestSort(event, property);
    };

  return (
    <TableHead>
      <TableRow>
        {headCells.map(headCell => (
          <TableCell key={headCell.id}>
            <TableSortLabel
              active={orderBy === headCell.id}
              direction={orderBy === headCell.id ? order : 'asc'}
              onClick={createSortHandler(headCell.id)}
            >
              {headCell.label}
            </TableSortLabel>
          </TableCell>
        ))}
      </TableRow>
    </TableHead>
  );
};

export const SearchResultsTable: FunctionComponent<SearchResultsTableProps> = ({
  cves,
}) => {
  const navigate = useNavigate();
  const [order, setOrder] = useState<Order>('asc');
  const [orderBy, setOrderBy] = useState<OrderBy>('id');

  const handleRequestSort = useCallback(
    (event: React.MouseEvent<unknown>, property: OrderBy) => {
      const isAsc = orderBy === property && order === 'asc';

      setOrder(isAsc ? 'desc' : 'asc');
      setOrderBy(property);
    },
    [order, orderBy]
  );

  const handleRowClick = useCallback(
    (cve: ParsedCve) => {
      navigate(`/vulnerability/${cve.id}`, { state: { cve } });
    },
    [navigate]
  );

  if (!cves.length) {
    return null;
  }

  return (
    <Table>
      <EnhancedTableHead
        order={order}
        orderBy={orderBy}
        onRequestSort={handleRequestSort}
      />
      <TableBody>
        {stableSortCves(cves, order, orderBy).map(cve => (
          <TableRow
            key={cve.id}
            hover
            onClick={() => handleRowClick(cve)}
            sx={{
              cursor: 'pointer',
            }}
          >
            <TableCell>{cve.id}</TableCell>
            <TableCell>{cve.metrics?.baseScore ?? 'N/A'}</TableCell>
            <TableCell>{toHumanReadableDate(cve.lastModified)}</TableCell>
            <TableCell>{toHumanReadableDate(cve.published)}</TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
};
