import { FunctionComponent, useState, useMemo, useCallback } from 'react';
import {
  Stack,
  Typography,
  Select,
  MenuItem,
  Pagination,
  SelectChangeEvent,
  FormControl,
  InputLabel,
  Box,
} from '@mui/material';
import { ParsedApiResponse, ParsedCve } from '../../../types/CVE.types';
import { SortOptionType, sortOptions } from './types/ResultsStack.types';
import { ResultStackItem } from './ResultStackItem';
import { sortCves } from './utils/ResultStack.utils';
import { containerStyles, listStackStyles } from './styles/ResultStack.styles';
import { useNavigate } from 'react-router-dom';

type ResultsStackProps = {
  data?: ParsedApiResponse;
  keyword?: string;
  defaultSort?: SortOptionType;
  onPageChange: (idx: number) => void;
  isLoadingData: boolean;
};

/**
 * Displays a stack of CVEs. The CVEs are sorted by the given sort key and sort order.
 * The CVEs are paginated, with the given number of items per page.
 */
export const ResultsStack: FunctionComponent<ResultsStackProps> = ({
  data,
  keyword,
  defaultSort = SortOptionType.CVE_ID_A_Z,
  onPageChange,
  isLoadingData,
}) => {
  const navigate = useNavigate();
  const [sortOption, setSortOption] = useState<SortOptionType>(defaultSort);

  const sortedCves = useMemo(
    () => sortCves(data?.cves ?? [], sortOption),
    [data?.cves, sortOption]
  );

  const handleSortChange = useCallback(
    (event: SelectChangeEvent<SortOptionType>) =>
      setSortOption(event.target.value as SortOptionType),
    []
  );

  const handlePageChange = useCallback(
    (_event: React.ChangeEvent<unknown>, page: number) => onPageChange(page),
    [onPageChange]
  );

  const handleViewClick = useCallback(
    (cve: ParsedCve) =>
      navigate(`/vulnerability/${cve.id}`, { state: { cve } }),
    [navigate]
  );

  const itemsRange = useMemo(() => {
    if (!data) {
      return null;
    }

    if (data.startIndex === 0) {
      return `1-${data.cves.length}`;
    }

    const start = data.resultsPerPage * (data.startIndex - 1) + 1;
    const end = data.resultsPerPage * data.startIndex;

    return `${start}-${end}`;
  }, [data]);

  if (isLoadingData || !data || !data.cves.length) {
    return null;
  }

  return (
    <Box sx={containerStyles}>
      <FormControl sx={{ minWidth: '250px' }} size='small'>
        <InputLabel id='sort-select-label'>Sort</InputLabel>
        <Select
          variant='outlined'
          labelId='sort-select-label'
          id='sort-select'
          value={sortOption}
          onChange={handleSortChange}
        >
          {sortOptions.map(option => (
            <MenuItem key={option} value={option}>
              {option}
            </MenuItem>
          ))}
        </Select>
      </FormControl>

      <Typography variant='body1'>
        {`Showing ${itemsRange} of ${data.totalResults} results${
          keyword ? ` for "${keyword}"` : ''
        }`}
      </Typography>

      <Stack sx={listStackStyles}>
        {sortedCves.map(cve => (
          <ResultStackItem
            key={cve.id}
            cve={cve}
            onViewClick={handleViewClick}
          />
        ))}
      </Stack>

      <Pagination
        size='small'
        count={Math.ceil(data?.totalResults / data?.resultsPerPage ?? 0)}
        page={data?.startIndex + 1}
        onChange={handlePageChange}
        disabled={isLoadingData}
        sx={{ alignSelf: 'center' }}
      />
    </Box>
  );
};
