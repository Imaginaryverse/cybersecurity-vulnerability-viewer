import { FunctionComponent, useState, useMemo } from 'react';
import {
  Typography,
  Table,
  TableHead,
  TableRow,
  TableCell,
  IconButton,
  Collapse,
  Box,
  TableBody,
  styled,
  Paper,
  Grid,
} from '@mui/material';
import { KeyboardArrowDown, KeyboardArrowUp } from '@mui/icons-material';
import { ParsedMetric } from '../../types/CVE.types';

type CveMetricsTableProps = {
  metrics: ParsedMetric[];
};

const Item = styled(Paper)(({ theme }) => ({
  ...theme.typography.body2,
  padding: theme.spacing(1),
  textAlign: 'center',
  color: theme.palette.text.secondary,
}));

const Row: FunctionComponent<{ metric: ParsedMetric }> = ({ metric }) => {
  const [open, setOpen] = useState(true);

  const propertyKeys = useMemo(() => {
    return Object.keys(metric.properties);
  }, [metric]);

  return (
    <>
      <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>
        <TableCell>
          <IconButton
            aria-label='expand row'
            size='small'
            onClick={() => setOpen(!open)}
          >
            {open ? <KeyboardArrowUp /> : <KeyboardArrowDown />}
          </IconButton>
        </TableCell>

        <TableCell component='th' scope='row'>
          {metric.baseScore}
        </TableCell>

        <TableCell component='th' scope='row'>
          {metric.baseSeverity}
        </TableCell>

        <TableCell component='th' scope='row'>
          {metric.version}
        </TableCell>
      </TableRow>

      <TableRow>
        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>
          <Collapse in={open} timeout='auto' unmountOnExit>
            <Box
              sx={{
                marginTop: 4,
                marginBottom: 4,
                display: 'flex',
                flexDirection: 'column',
                gap: 1,
              }}
            >
              <Grid container spacing={2}>
                {propertyKeys.map(key => (
                  <Grid item xs={6}>
                    <Item>
                      <Typography variant='body1' gutterBottom>
                        <b>{key}</b>
                      </Typography>
                      <Typography variant='body2'>
                        {metric.properties[key]}
                      </Typography>
                    </Item>
                  </Grid>
                ))}
              </Grid>
            </Box>
          </Collapse>
        </TableCell>
      </TableRow>
    </>
  );
};

export const CveMetricsTable: FunctionComponent<CveMetricsTableProps> = ({
  metrics,
}) => {
  return (
    <Table aria-label='cve metrics'>
      <TableHead>
        <TableRow>
          <TableCell />
          <TableCell>Base Score</TableCell>
          <TableCell>Base Severity</TableCell>
          <TableCell>Version</TableCell>
        </TableRow>
      </TableHead>

      <TableBody>
        {metrics.map(metric => (
          <Row key={metric.version} metric={metric} />
        ))}
      </TableBody>
    </Table>
  );
};
