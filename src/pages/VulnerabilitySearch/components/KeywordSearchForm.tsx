import { FunctionComponent, useCallback, useMemo } from 'react';
import {
  Button,
  Card,
  MenuItem,
  Select,
  SelectChangeEvent,
  TextField,
} from '@mui/material';
import { isValidKeyword } from '../../../utils/stringUtils';
import { TimeSpanType } from '../../../types/TimeSpan.types';

type KeywordSearchFormProps = {
  keywordInput: string;
  onKeywordInputChange: (input: string) => void;
  timeSpan: TimeSpanType;
  onTimeSpanChange: (timeSpan: TimeSpanType) => void;
  onSubmit: (e?: React.FormEvent<HTMLFormElement>) => void;
  isLoading: boolean;
};

const formStyles: React.CSSProperties = {
  width: '100%',
  marginTop: '1rem',
  display: 'flex',
  flexDirection: 'column',
  alignItems: 'center',
};

const inputStyles: React.CSSProperties = {
  width: '100%',
  maxWidth: '500px',
  marginBottom: '1rem',
};

const buttonStyles: React.CSSProperties = {
  width: '100%',
  maxWidth: '500px',
};

const timeSpanOptions: TimeSpanType[] = [
  'All Time',
  'Last 120 Days',
  'Last 90 Days',
  'Last 30 Days',
  'Last 7 Days',
  'Last 48 Hours',
  'Last 24 Hours',
];

export const KeywordSearchForm: FunctionComponent<KeywordSearchFormProps> = ({
  keywordInput,
  onKeywordInputChange,
  timeSpan,
  onTimeSpanChange,
  onSubmit,
  isLoading,
}) => {
  const isInputError = useMemo(
    () => !!keywordInput.length && !isValidKeyword(keywordInput),
    [keywordInput]
  );

  const handleInputChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      if (e.target.value[0] === ' ') {
        return;
      }

      onKeywordInputChange(e.target.value);
    },
    [onKeywordInputChange]
  );

  const handleTimeSpanChange = useCallback(
    (e: SelectChangeEvent<TimeSpanType>) => {
      onTimeSpanChange(e.target.value as TimeSpanType);
    },
    [onTimeSpanChange]
  );

  return (
    <Card
      sx={{
        paddingTop: '1rem',
        paddingBottom: '2rem',
        paddingX: '1rem',
      }}
    >
      <form onSubmit={onSubmit} style={formStyles}>
        <TextField
          id='keyword'
          label='Keyword'
          placeholder='Keyword'
          variant='outlined'
          value={keywordInput}
          onChange={handleInputChange}
          sx={inputStyles}
          required
          error={isInputError}
          helperText={
            isInputError && 'Keyword must be at least 3 characters long'
          }
          disabled={isLoading}
        />

        <Select
          value={timeSpan}
          onChange={handleTimeSpanChange}
          variant='outlined'
          sx={inputStyles}
          disabled={isLoading}
        >
          {timeSpanOptions.map(option => (
            <MenuItem key={option} value={option}>
              {option}
            </MenuItem>
          ))}
        </Select>

        <Button
          type='submit'
          variant='contained'
          color='primary'
          disabled={isLoading || !isValidKeyword(keywordInput)}
          sx={buttonStyles}
        >
          {isLoading ? 'Loading...' : 'Search'}
        </Button>
      </form>
    </Card>
  );
};
