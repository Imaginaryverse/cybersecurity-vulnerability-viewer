import { FunctionComponent, useMemo } from 'react';
import { Button, TextField } from '@mui/material';
import { isValidKeyword } from '../../../utils/stringUtils';

type KeywordSearchFormProps = {
  keywordInput: string;
  onKeywordInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  onSubmit: (e?: React.FormEvent<HTMLFormElement>) => void;
  isLoading: boolean;
};

const formStyles: React.CSSProperties = {
  width: '100%',
  color: 'inherit',
  display: 'flex',
  flexDirection: 'column',
  justifyContent: 'center',
  alignItems: 'center',
  gap: '1rem',
};

const inputStyles: React.CSSProperties = {
  width: '100%',
  maxWidth: '500px',
};

export const KeywordSearchForm: FunctionComponent<KeywordSearchFormProps> = ({
  keywordInput,
  onKeywordInputChange,
  onSubmit,
  isLoading,
}) => {
  const isInputError = useMemo(
    () => !!keywordInput.length && !isValidKeyword(keywordInput),
    [keywordInput]
  );

  return (
    <form onSubmit={onSubmit} style={formStyles}>
      <TextField
        id='keyword'
        label='Keyword'
        placeholder='Keyword'
        variant='outlined'
        value={keywordInput}
        onChange={onKeywordInputChange}
        sx={inputStyles}
        required
        error={isInputError}
        helperText={
          isInputError &&
          'Keyword must be at least 3 alphanumeric characters long'
        }
      />

      <Button
        type='submit'
        variant='contained'
        color='primary'
        disabled={isLoading || !isValidKeyword(keywordInput)}
      >
        {isLoading ? 'Loading...' : 'Search'}
      </Button>
    </form>
  );
};
