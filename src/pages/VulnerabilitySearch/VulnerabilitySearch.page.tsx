import React, {
  FunctionComponent,
  useEffect,
  useState,
  useCallback,
  useMemo,
} from 'react';
import { isValidKeyword, serializeSearchParams } from '../../utils/stringUtils';
import { useSearchParams } from 'react-router-dom';
import { Box, Link, Typography } from '@mui/material';
import { useCvesByKeywordAndTimeSpanQuery } from '../../api/hooks/useCveQuery';
import { Page } from '../../components/atoms/Page/Page';
import { KeywordSearchForm } from './components/KeywordSearchForm';
import { LoadingSpinner } from '../../components/atoms/LoadingSpinner/LoadingSpinner';
import { TimeSpanType } from '../../types/TimeSpan.types';
import { ResultsStack } from '../../components/organisms/ResultsStack/ResultsStack';
import { SortOptionType } from '../../components/organisms/ResultsStack/types/ResultsStack.types';

export const VulnerabilitySearchPage: FunctionComponent = () => {
  const [searchParams, setSearchParams] = useSearchParams();
  const [keywordInput, setKeywordInput] = useState('');
  const [timeSpan, setTimeSpan] = useState<TimeSpanType>('All Time');

  const keywordSearchParam = useMemo(
    () => searchParams.get('keyword'),
    [searchParams]
  );

  const timeSpanSearchParam = useMemo(
    () => searchParams.get('timeSpan'),
    [searchParams]
  );

  const pageIndexSearchParam = useMemo(
    () => Number(searchParams.get('pageIndex') ?? 0),
    [searchParams]
  );

  const { isLoading, isFetching, error, data, isPreviousData, refetch } =
    useCvesByKeywordAndTimeSpanQuery({
      keyword: keywordSearchParam || '',
      timeSpan: (timeSpanSearchParam || 'All Time') as TimeSpanType,
      pageIndex: pageIndexSearchParam,
    });

  const handlePageChange = useCallback(
    (idx: number) => {
      if (!isPreviousData) {
        setSearchParams(
          serializeSearchParams({
            keyword: keywordSearchParam,
            timeSpan: timeSpanSearchParam,
            pageIndex: idx,
          })
        );
      }
    },
    [isPreviousData, keywordSearchParam, timeSpanSearchParam, setSearchParams]
  );

  const handleSearchSubmit = useCallback(
    (e?: React.FormEvent<HTMLFormElement>) => {
      e?.preventDefault();

      if (!isValidKeyword(keywordInput)) {
        return;
      }

      setSearchParams(
        serializeSearchParams({
          keyword: keywordInput,
          timeSpan: timeSpan,
          pageIndex: 0,
        })
      );
    },
    [keywordInput, timeSpan, setSearchParams]
  );

  useEffect(() => {
    if (keywordSearchParam && isValidKeyword(keywordSearchParam)) {
      setKeywordInput(keywordSearchParam);
      setTimeSpan((timeSpanSearchParam || 'All Time') as TimeSpanType);
      refetch();
    }
  }, [keywordSearchParam, timeSpanSearchParam, pageIndexSearchParam, refetch]);

  return (
    <Page>
      <Typography variant='h2' component='h1'>
        Search
      </Typography>

      <Box>
        <Typography variant='body1' component='p' gutterBottom>
          Search for vulnerabilities by keyword and time span. The search is
          limited to the National Vulnerability Database (NVD). Please note that
          using a narrow time span may return fewer or no results.
        </Typography>

        <Typography variant='body1' component='p' gutterBottom>
          If you are looking for a specific vulnerability, use the{' '}
          <Link
            href='https://cwe.mitre.org/'
            target='_blank'
            rel='noopener noreferrer'
          >
            Common Weakness Enumeration (CWE)
          </Link>{' '}
          identifier for best results.
        </Typography>
      </Box>

      <KeywordSearchForm
        keywordInput={keywordInput}
        onKeywordInputChange={setKeywordInput}
        timeSpan={timeSpan}
        onTimeSpanChange={setTimeSpan}
        onSubmit={handleSearchSubmit}
        isLoading={isLoading}
      />

      {!isLoading && !!error && <Typography>{error.message}</Typography>}

      {isLoading && <LoadingSpinner />}

      <ResultsStack
        data={data}
        keyword={keywordSearchParam || ''}
        defaultSort={SortOptionType.CVE_ID_A_Z}
        onPageChange={handlePageChange}
        isLoadingData={isLoading}
      />
    </Page>
  );
};
