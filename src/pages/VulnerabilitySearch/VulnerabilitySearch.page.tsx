import React, {
  FunctionComponent,
  useEffect,
  useState,
  useCallback,
  useMemo,
} from 'react';
import { isValidKeyword, serializeSearchParams } from '../../utils/stringUtils';
import { useSearchParams } from 'react-router-dom';
import { CircularProgress, Typography } from '@mui/material';
import { useCvesByKeywordQuery } from '../../api/hooks/useCveQuery';
import { SearchResultsTable } from '../../components/organisms/SearchResultsTable';
import { Page } from '../../components/atoms/Page/Page';
import { KeywordSearchForm } from './components/KeywordSearchForm';

export const VulnerabilitySearchPage: FunctionComponent = () => {
  const [searchParams, setSearchParams] = useSearchParams();
  const [keywordInput, setKeywordInput] = useState('');

  const keywordSearchParam = useMemo(
    () => searchParams.get('keyword'),
    [searchParams]
  );

  const pageIndexSearchParam = useMemo(
    () => Number(searchParams.get('pageIndex') ?? 0),
    [searchParams]
  );

  const { isLoading, error, data, isPreviousData, refetch } =
    useCvesByKeywordQuery({
      keyword: keywordSearchParam || '',
      pageIndex: pageIndexSearchParam,
    });

  const handleInputChange = useCallback(
    (e: React.ChangeEvent<HTMLInputElement>) => {
      if (e.target.value[0] === ' ') {
        return;
      }

      setKeywordInput(e.target.value);
    },
    [setKeywordInput]
  );

  const handlePageChange = useCallback(
    (idx: number) => {
      if (!isPreviousData) {
        setSearchParams(
          serializeSearchParams({
            keyword: keywordSearchParam,
            pageIndex: idx,
          })
        );
      }
    },
    [isPreviousData, keywordSearchParam, setSearchParams]
  );

  const handleSearchSubmit = useCallback(
    (e?: React.FormEvent<HTMLFormElement>) => {
      e?.preventDefault();

      if (!isValidKeyword(keywordInput)) {
        return;
      }

      setSearchParams(
        serializeSearchParams({
          keyword: keywordInput,
          pageIndex: 0,
        })
      );
    },
    [keywordInput, setSearchParams]
  );

  useEffect(() => {
    if (keywordSearchParam && isValidKeyword(keywordSearchParam)) {
      setKeywordInput(keywordSearchParam);
      refetch();
    }
  }, [keywordSearchParam, pageIndexSearchParam, refetch]);

  return (
    <Page>
      <Typography variant='h2' component='h1'>
        Search
      </Typography>

      <KeywordSearchForm
        keywordInput={keywordInput}
        onKeywordInputChange={handleInputChange}
        onSubmit={handleSearchSubmit}
        isLoading={isLoading}
      />

      {!!error && (
        <Typography>{`No results found for "${keywordSearchParam}"`}</Typography>
      )}

      {isLoading && (
        <CircularProgress
          sx={{
            margin: '2rem auto',
          }}
        />
      )}

      {!isLoading && !!data && (
        <SearchResultsTable
          data={data}
          searchTerm={keywordSearchParam ?? undefined}
          onPageChange={handlePageChange}
          disabled={isLoading || isPreviousData}
        />
      )}
    </Page>
  );
};
