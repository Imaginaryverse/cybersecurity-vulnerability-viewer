import React, { FunctionComponent, useEffect, useState } from 'react';
import { useVulnerabilities } from '../app/hooks/useVulnerabilities';
import {
  Button,
  TextField,
  Typography,
  List,
  ListItem,
  Pagination,
  CircularProgress,
} from '@mui/material';
import { isValidKeyword } from '../utils/stringUtils';

export const VulnerabilitiesPage: FunctionComponent = () => {
  const {
    keyword,
    setKeyword,
    pageIndex,
    setPageIndex,
    isLoading,
    error,
    data,
    isPreviousData,
  } = useVulnerabilities();

  const [input, setInput] = useState('');

  function handleSearch(e?: React.FormEvent<HTMLFormElement>) {
    e?.preventDefault();

    if (!isValidKeyword(input)) {
      return;
    }

    setPageIndex(0);
    setKeyword(input);
  }

  useEffect(() => {
    setInput(keyword);
  }, [keyword]);

  return (
    <>
      <Typography variant='h1' component='h1'>
        Vulnerabilities
      </Typography>

      <form
        onSubmit={handleSearch}
        style={{
          width: '100%',
          maxWidth: '500px',
          color: 'inherit',
          display: 'flex',
          flexDirection: 'column',
          gap: '1rem',
        }}
      >
        <TextField
          id='software-name'
          label='Software Name'
          placeholder='Software Name'
          variant='outlined'
          value={input}
          onChange={event => setInput(event.target.value)}
          fullWidth
          required
        />

        <Button
          type='submit'
          variant='contained'
          color='primary'
          disabled={isLoading || !isValidKeyword(input)}
        >
          {isLoading ? 'Loading...' : 'Search'}
        </Button>
      </form>

      {!!error && (
        <Typography>{`No results found for "${keyword}"`}</Typography>
      )}

      {!!data && (
        <Typography>{`Found ${data.totalResults} results for "${keyword}"`}</Typography>
      )}

      {isLoading ? (
        <CircularProgress />
      ) : (
        <List>
          {data?.vulnerabilities.map(vulnerability => (
            <ListItem key={vulnerability.id}>
              <Typography>{vulnerability.id}</Typography>
            </ListItem>
          ))}
        </List>
      )}

      {!!data && (
        <Pagination
          variant='outlined'
          count={data.maxPage}
          page={pageIndex + 1}
          onChange={(event, idx) => {
            if (!isPreviousData) {
              setPageIndex(idx - 1);
            }
          }}
          disabled={isLoading || isPreviousData}
        />
      )}
    </>
  );
};
