import { FunctionComponent, useCallback, useState } from 'react';
import {
  Button,
  CircularProgress,
  MenuItem,
  Select,
  SelectChangeEvent,
  Typography,
} from '@mui/material';
import { Page } from '../../components/atoms/Page/Page';
import { TimeSpan } from '../../types/TimeSpan.enum';
import { useCvesByTimeSpanQuery } from '../../api/hooks/useCveQuery';
import { SearchResultsTable } from '../../components/organisms/SearchResultsTable';
import { camelCaseToTitleCase } from '../../utils/stringUtils';
import { LoadingSpinner } from '../../components/atoms/LoadingSpinner/LoadingSpinner';

const timeSpanOptions: { label: string; value: TimeSpan }[] = [
  {
    label: 'Last 24 hours',
    value: TimeSpan.Last24Hours,
  },
  {
    label: 'Last 48 hours',
    value: TimeSpan.Last48Hours,
  },
  {
    label: 'Last 7 days',
    value: TimeSpan.Last7Days,
  },
  {
    label: 'Last 30 days',
    value: TimeSpan.Last30Days,
  },
  {
    label: 'Last 90 days',
    value: TimeSpan.Last90Days,
  },
  {
    label: 'Last 120 days',
    value: TimeSpan.Last120Days,
  },
];

export const HomePage: FunctionComponent = () => {
  const [timeSpan, setTimeSpan] = useState(TimeSpan.Last24Hours);

  const { isLoading, error, data, isPreviousData, refetch } =
    useCvesByTimeSpanQuery({
      timeSpan,
      pageIndex: 0,
    });

  const handleTimeSpanChange = useCallback((e: SelectChangeEvent<TimeSpan>) => {
    setTimeSpan(e.target.value as TimeSpan);
  }, []);

  const searchByTimeSpan = useCallback(
    (e: React.FormEvent<HTMLFormElement>) => {
      e.preventDefault();

      refetch();
    },
    [refetch]
  );

  return (
    <Page>
      <Typography variant='h2' component='h2'>
        Home
      </Typography>

      <form
        onSubmit={searchByTimeSpan}
        style={{
          width: '100%',
          color: 'inherit',
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'center',
          alignItems: 'center',
          gap: '1rem',
        }}
      >
        <Select
          value={timeSpan}
          onChange={handleTimeSpanChange}
          variant='outlined'
          sx={{
            width: '100%',
            maxWidth: '500px',
          }}
        >
          {timeSpanOptions.map(option => (
            <MenuItem key={option.value} value={option.value}>
              {option.label}
            </MenuItem>
          ))}
        </Select>

        <Button
          type='submit'
          variant='contained'
          color='primary'
          disabled={isLoading}
        >
          {isLoading ? 'Loading...' : 'Search'}
        </Button>
      </form>

      {isLoading && <LoadingSpinner />}

      {!isLoading && !!data && (
        <SearchResultsTable
          data={data}
          searchTerm={camelCaseToTitleCase(timeSpan)}
          defaultOrderBy='published'
          defaultOrder='desc'
          onPageChange={() => null}
          disabled={isLoading || isPreviousData}
        />
      )}
    </Page>
  );
};
