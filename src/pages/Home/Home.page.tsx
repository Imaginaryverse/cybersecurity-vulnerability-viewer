import { FunctionComponent, useCallback, useEffect, useMemo } from 'react';
import { Button, Card, Typography } from '@mui/material';
import { Page } from '../../components/atoms/Page/Page';
import { LoadingSpinner } from '../../components/atoms/LoadingSpinner/LoadingSpinner';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { ResultsStack } from '../../components/organisms/ResultsStack/ResultsStack';
import { SortOptionType } from '../../components/organisms/ResultsStack/types/ResultsStack.types';
import { useVulnerabilities } from '../../app/__MockVulnerabilitiesProvider__';

export const HomePage: FunctionComponent = () => {
  const navigate = useNavigate();
  const [searchParams, setSearchParams] = useSearchParams();

  const pageIndexSearchParam = useMemo(
    () => Number(searchParams.get('pageIndex') ?? 0),
    [searchParams]
  );

  const {
    cves48hours,
    fetchCves48hours,
    isLoadingCves48hours,
    errorLoadingCves48hours,
  } = useVulnerabilities();

  const handlePageChange = useCallback(
    (pageNum: number) => {
      setSearchParams(`pageIndex=${pageNum - 1}`);
      fetchCves48hours(pageNum - 1);
    },
    [fetchCves48hours, setSearchParams]
  );

  useEffect(() => {
    if (errorLoadingCves48hours) {
      return;
    }

    if (!cves48hours && !isLoadingCves48hours) {
      if (!pageIndexSearchParam) {
        setSearchParams('pageIndex=0');
        fetchCves48hours(0);
      } else {
        fetchCves48hours(pageIndexSearchParam);
      }
    }
  }, [
    errorLoadingCves48hours,
    pageIndexSearchParam,
    cves48hours,
    isLoadingCves48hours,
    fetchCves48hours,
    setSearchParams,
  ]);

  return (
    <Page>
      <Typography variant='h2' component='h2'>
        VULN
      </Typography>

      <Card
        sx={{ paddingTop: '1rem', paddingBottom: '2rem', paddingX: '1rem' }}
      >
        <Typography variant='h5' component='h3' gutterBottom>
          Looking for something specific?
        </Typography>

        <Typography variant='body1' component='p' gutterBottom>
          You can search for a specific vulnerability by its CVE ID, or by
          keyword. Click the button below to get started.
        </Typography>

        <Button
          onClick={() => navigate('/vulnerability/search')}
          variant='contained'
          sx={{
            marginTop: '1rem',
            width: 'fit-content',
          }}
        >
          Search by keyword
        </Button>
      </Card>

      <Typography variant='h5' component='h3'>
        Latest entries (last 48 hours)
      </Typography>

      {isLoadingCves48hours && (
        <Typography variant='body1' component='p'>
          Loading latest vulnerabilities...
        </Typography>
      )}

      {isLoadingCves48hours && <LoadingSpinner />}

      {!isLoadingCves48hours && !!errorLoadingCves48hours && (
        <Typography variant='body1' component='p'>
          {errorLoadingCves48hours.message}
        </Typography>
      )}

      <ResultsStack
        data={cves48hours}
        defaultSort={SortOptionType.PUBLISHED_NEW_OLD}
        onPageChange={handlePageChange}
        isLoadingData={isLoadingCves48hours}
      />
    </Page>
  );
};
