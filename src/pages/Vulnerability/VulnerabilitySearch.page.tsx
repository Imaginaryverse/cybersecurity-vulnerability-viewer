/* eslint-disable react-hooks/exhaustive-deps */
import React, { FunctionComponent, useEffect, useState } from 'react';
import { isValidKeyword } from '../../utils/stringUtils';
import { useSearchParams } from 'react-router-dom';
import {
  Button,
  CircularProgress,
  Pagination,
  TextField,
  Typography,
} from '@mui/material';
import { useCvesByKeywordQuery } from '../../api/hooks/useCveQuery';
import { SearchResultsTable } from '../../components/organisms/SearchResultsTable';
import { Page } from '../../components/atoms/Page/Page';

function serializeSearchParams(
  params: Record<string, string | number | boolean | null | undefined>
) {
  return Object.entries(params)
    .map(([key, value]) => `${key}=${encodeURIComponent(String(value))}`)
    .join('&');
}

export const VulnerabilitySearchPage: FunctionComponent = () => {
  const [searchParams, setSearchParams] = useSearchParams();

  const [keywordInput, setKeywordInput] = useState('');

  const { isLoading, error, data, isPreviousData, refetch } =
    useCvesByKeywordQuery({
      keyword: searchParams.get('keyword') || '',
      pageIndex: Number(searchParams.get('pageIndex')) || 0,
    });

  function searchByKeyword(e?: React.FormEvent<HTMLFormElement>) {
    e?.preventDefault();

    // Prevent searching if keyword is invalid
    if (!isValidKeyword(keywordInput)) {
      return;
    }

    setSearchParams(
      serializeSearchParams({
        keyword: keywordInput,
        pageIndex: 0,
      })
    );
  }

  useEffect(() => {
    setKeywordInput(searchParams.get('keyword') || '');
  }, [searchParams]);

  useEffect(() => {
    if (!isValidKeyword(searchParams.get('keyword') ?? '')) {
      return;
    }

    refetch();
  }, [searchParams]);

  return (
    <Page>
      <Typography variant='h2' component='h1'>
        Search
      </Typography>

      <form
        onSubmit={searchByKeyword}
        style={{
          width: '100%',
          color: 'inherit',
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'center',
          alignItems: 'center',
          gap: '1rem',
        }}
      >
        <TextField
          id='keyword'
          label='Keyword'
          placeholder='Keyword'
          variant='outlined'
          value={keywordInput}
          onChange={e => setKeywordInput(e.target.value)}
          sx={{
            width: '100%',
            maxWidth: '500px',
          }}
          required
        />

        <Button
          type='submit'
          variant='contained'
          color='primary'
          disabled={isLoading || !isValidKeyword(keywordInput)}
        >
          {isLoading ? 'Loading...' : 'Search'}
        </Button>
      </form>

      {!!error && (
        <Typography>{`No results found for "${searchParams.get(
          'keyword'
        )}"`}</Typography>
      )}

      {!isLoading && !!data && (
        <Typography>{`Found ${
          data.totalResults
        } results for "${searchParams.get('keyword')}"`}</Typography>
      )}

      {isLoading ? (
        <CircularProgress />
      ) : (
        <SearchResultsTable cves={data?.cves || []} />
      )}

      {!!data && (
        <Pagination
          variant='outlined'
          count={data.maxPage}
          page={Number(searchParams.get('pageIndex')) + 1}
          onChange={(event, idx) => {
            if (!isPreviousData) {
              setSearchParams(
                serializeSearchParams({
                  keyword: searchParams.get('keyword'),
                  pageIndex: idx - 1,
                })
              );
            }
          }}
          disabled={isLoading || isPreviousData}
          sx={{
            alignSelf: 'center',
          }}
        />
      )}
    </Page>
  );
};
