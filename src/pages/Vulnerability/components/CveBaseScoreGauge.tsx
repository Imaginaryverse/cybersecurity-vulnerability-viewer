import { FunctionComponent } from 'react';
import { ParsedCve } from '../../../types/CVE.types';
import { Box, Card, CircularProgress, Typography } from '@mui/material';
import { SeverityType } from '../../../types/CVSS.enums';

type Props = {
  cve: ParsedCve;
};

function getColor(value: number) {
  const maxHue = 120;
  const minHue = 0;

  const hue = maxHue - (value * (maxHue - minHue)) / 10;

  return `hsl(${hue}, 80%, 50%)`;
}

type GaugeProps = {
  value: number;
  label?: string;
};

const Gauge: FunctionComponent<GaugeProps> = ({ value, label }) => {
  return (
    <Box
      sx={{
        position: 'relative',
        width: 'fit-content',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
      }}
    >
      <CircularProgress
        variant='determinate'
        sx={{
          color: theme =>
            theme.palette.grey[theme.palette.mode === 'light' ? 200 : 800],
        }}
        size={200}
        thickness={5}
        value={100}
      />
      <CircularProgress
        variant='determinate'
        sx={{
          color: getColor(value),
          position: 'absolute',
          zIndex: 1,
        }}
        size={200}
        thickness={5}
        value={value * 10}
      />
      <Box
        sx={{
          top: 0,
          left: 0,
          bottom: 0,
          right: 0,
          position: 'absolute',
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
        }}
      >
        <Typography variant='h6' component='div' color='text.primary'>
          {value}
        </Typography>
        {!!label && (
          <Typography variant='body1' component='div' color='text.secondary'>
            {label}
          </Typography>
        )}
      </Box>
    </Box>
  );
};

export const CveBaseScoreGauge: FunctionComponent<Props> = ({ cve }) => {
  if (!cve?.metrics?.baseScore) {
    return null;
  }

  return (
    <Card
      elevation={0}
      sx={{
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'flex-start',
        alignItems: 'center',
        marginTop: '1rem',
      }}
    >
      <Typography
        variant='h4'
        sx={{
          marginBottom: '2rem',
        }}
      >
        {cve.id}
      </Typography>

      <Gauge
        value={cve.metrics?.baseScore}
        label={
          cve.metrics?.baseSeverity !== SeverityType.NOT_DEFINED
            ? cve.metrics?.baseSeverity
            : undefined
        }
      />
    </Card>
  );
};
