import { FunctionComponent, useEffect, useState } from 'react';
import {
  Typography,
  CircularProgress,
  Paper,
  Grid,
  Divider,
} from '@mui/material';
import { useLocation, useParams } from 'react-router-dom';
import { useCveByIdQuery } from '../../api/hooks/useCveQuery';
import { ParsedCve } from '../../types/CVE.types';
import { Page } from '../../components/atoms/Page/Page';
import { CveBaseScoreGauge } from './components/CveBaseScoreGauge';
import { CveSummaryCard } from './components/CveSummaryCard';
import { CveReferencesList } from './components/CveReferencesList';
import { CveVectorsGrid } from './components/CveVectorsGrid';
import { CveConfigurationsList } from './components/CveConfigurationsList';
import { CveWeaknessesList } from './components/CveWeaknessesList';
import { CveScoreGaugesGrid } from './components/CveScoreGaugesGrid';

export const VulnerabilityPage: FunctionComponent = () => {
  const { id = '' } = useParams();
  const location = useLocation();

  const [cve, setCve] = useState<ParsedCve | undefined>(undefined);

  const { isLoading, isFetching, error, data, refetch } = useCveByIdQuery(id);

  useEffect(() => {
    if (location.state?.cve) {
      setCve(location.state.cve as ParsedCve);
      return;
    }

    refetch();
  }, [id, location.state, refetch]);

  useEffect(() => {
    if (!data) {
      return;
    }

    setCve(data);
  }, [data]);

  return (
    <Page>
      {(isLoading || isFetching) && (
        <CircularProgress
          sx={{
            margin: '2rem auto',
          }}
        />
      )}

      {error && <Typography>{error.message}</Typography>}

      {!!cve && (
        <Paper
          elevation={0}
          sx={{
            display: 'flex',
            flexDirection: 'column',
            gap: '2rem',
          }}
        >
          <Grid container spacing={2} paddingRight={'1rem'}>
            <Grid item xs={12} md={6}>
              <CveBaseScoreGauge cve={cve} />
            </Grid>

            <Grid item xs={12} md={6}>
              <CveSummaryCard cve={cve} />
            </Grid>
          </Grid>

          <Divider />

          <CveVectorsGrid cve={cve} />

          <Divider />

          <CveScoreGaugesGrid cve={cve} />

          <Divider />

          <CveWeaknessesList cve={cve} />

          <Divider />

          <CveConfigurationsList cve={cve} />

          <Divider />

          <CveReferencesList cve={cve} />

          <Divider />
        </Paper>
      )}
    </Page>
  );
};
