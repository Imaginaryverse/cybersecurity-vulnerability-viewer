/* eslint-disable react-hooks/exhaustive-deps */
import { FunctionComponent, useEffect, useState, useMemo } from 'react';
import {
  Typography,
  CircularProgress,
  Box,
  List,
  ListItem,
  Link,
} from '@mui/material';
import { useLocation, useParams } from 'react-router-dom';
import { useCveByIdQuery } from '../../api/hooks/useCveQuery';
import { ParsedCve } from '../../types/CVE.types';
import { CveMetricsTable } from '../../components/organisms/CveMetricsTable';
import { Page } from '../../components/atoms/Page/Page';

export const VulnerabilityPage: FunctionComponent = () => {
  const { id = '' } = useParams();
  const location = useLocation();

  const [cve, setCve] = useState<ParsedCve | undefined>(undefined);

  const { isLoading, isFetching, error, data, refetch } = useCveByIdQuery(id);

  useEffect(() => {
    if (location.state?.cve) {
      setCve(location.state.cve as ParsedCve);
      return;
    }

    refetch();
  }, [id, location.state]);

  useEffect(() => {
    if (!data) {
      return;
    }

    setCve(data);
  }, [data]);

  if (cve) {
    console.log(cve);
  }

  const description = useMemo(() => {
    if (!cve) {
      return '';
    }

    return cve.descriptions.find(d => d.lang === 'en')?.value ?? '';
  }, [cve]);

  return (
    <Page>
      <Typography variant='h2' component='h1'>
        {id}
      </Typography>

      {(isLoading || isFetching) && <CircularProgress />}

      {error && <Typography>{error.message}</Typography>}

      {!!cve && (
        <Box
          sx={{
            width: '100%',
            display: 'flex',
            flexDirection: 'column',
            gap: '1rem',
          }}
        >
          <Typography variant='h5' component='h5'>
            Description:
          </Typography>
          <Typography>{description}</Typography>

          <CveMetricsTable metrics={cve.metrics} />

          {!!cve.references.length && (
            <Typography variant='h5' component='h5'>
              References ({cve.references.length}):
            </Typography>
          )}
          <List
            sx={{
              display: 'flex',
              flexDirection: 'column',
            }}
          >
            {cve.references.map(ref => (
              <ListItem
                key={ref.url}
                sx={{
                  display: 'flex',
                  flexDirection: 'column',
                  justifyContent: 'center',
                  alignItems: 'flex-start',
                  gap: '0.5rem',
                  padding: '0.5rem 0',
                }}
              >
                <Typography>
                  <b>Source:</b> {ref.source}
                </Typography>
                <Typography>
                  <Link href={ref.url} target='_blank' rel='noreferrer'>
                    {ref.url}
                  </Link>
                </Typography>
              </ListItem>
            ))}
          </List>
        </Box>
      )}
    </Page>
  );
};
