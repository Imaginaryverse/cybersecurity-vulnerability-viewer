/* eslint-disable react-hooks/exhaustive-deps */
import { FunctionComponent, useEffect, useState } from 'react';
import { Typography, CircularProgress, Box } from '@mui/material';
import { useLocation, useParams } from 'react-router-dom';
import { SearchResponse, Vulnerability } from '../../types';
import axios from 'axios';
import { useQuery } from 'react-query';
import { parseCVE } from '../../utils/cveParser';

const baseURL = 'https://services.nvd.nist.gov/rest/json/cves/2.0';

async function fetchVulnerability(id: string): Promise<Vulnerability> {
  const { data } = await axios.get<SearchResponse>(`${baseURL}?cveId=${id}`);

  if (!data?.vulnerabilities.length) {
    throw new Error(`Could not find "${id}"`);
  }

  return parseCVE(data.vulnerabilities[0].cve);
}

export const VulnerabilityPage: FunctionComponent = () => {
  const { id = '' } = useParams();
  const location = useLocation();

  const [vulnerability, setVulnerability] = useState<Vulnerability | undefined>(
    undefined
  );

  const { isLoading, isFetching, error, refetch } = useQuery<
    Vulnerability,
    Error
  >(
    ['vulnerability', id],
    () => {
      setVulnerability(undefined);
      return fetchVulnerability(id);
    },
    {
      enabled: false,
      onSuccess: data => {
        setVulnerability(data);
      },
    }
  );

  useEffect(() => {
    if (location.state?.vulnerability) {
      setVulnerability(location.state.vulnerability as Vulnerability);
      return;
    }

    refetch();
  }, [id, location.state]);

  return (
    <>
      <Typography variant='h1' component='h1'>
        Vulnerability {id}
      </Typography>

      {(isLoading || isFetching) && <CircularProgress />}

      {error && <Typography>{error.message}</Typography>}

      {!!vulnerability && (
        <Box sx={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>
          <Typography>{vulnerability.id}</Typography>
          <Typography>{vulnerability.description}</Typography>
        </Box>
      )}
    </>
  );
};
