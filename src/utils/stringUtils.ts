type RemoveFalsyType = undefined | null | '' | 0 | false;

/**
 * Serializes an object into a query string.
 * @param params - object to serialize
 * @param options - options for serializing, such as removing falsy values
 * @returns string
 */
export function serializeSearchParams(
  query: Record<string, unknown>,
  options?: {
    removeFalsy?: RemoveFalsyType[];
  }
): string {
  const queryKeys = Object.keys(query);
  const keyValuePairs: string[] = [];

  queryKeys.forEach(key => {
    const value = query[key];
    const isFalsy = options?.removeFalsy?.includes(value as RemoveFalsyType);
    if (isFalsy) {
      return;
    }
    keyValuePairs.push(`${key}=${value}`);
  });

  return keyValuePairs.join('&');
}

/**
 * Checks if a keyword is valid for searching.
 * Keywords must be at least 3 characters long, ignoring empty space.
 * @param keyword - keyword to check
 * @returns boolean
 */
export function isValidKeyword(keyword: string) {
  if (!keyword?.length) {
    return false;
  }

  return keyword.replace(/\s/g, '').length >= 3;
}

/**
 * Converts a camelCase string to Title Case.
 * @param str - string to convert
 * @returns string
 */
export function camelCaseToTitleCase(str: string): string {
  const result = str.replace(/([A-Z0-9])/g, ' $1');
  return result.charAt(0).toUpperCase() + result.slice(1);
}
