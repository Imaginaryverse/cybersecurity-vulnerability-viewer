import { VectorItem } from '../types/CVE.types';
import { VECTOR_MAP } from './vectorMap';

type RemoveFalsyType = undefined | null | '' | 0 | false;

/**
 * Serializes an object into a query string.
 * @param params - object to serialize
 * @param options - options for serializing, such as removing falsy values
 * @returns string
 */
export function serializeSearchParams(
  query: Record<string, unknown>,
  options?: {
    removeFalsy?: RemoveFalsyType[];
  }
): string {
  const queryKeys = Object.keys(query);
  const keyValuePairs: string[] = [];

  queryKeys.forEach(key => {
    const value = query[key];
    const isFalsy = options?.removeFalsy?.includes(value as RemoveFalsyType);
    if (isFalsy) {
      return;
    }
    keyValuePairs.push(`${key}=${value}`);
  });

  return keyValuePairs.join('&');
}

/**
 * Checks if a keyword is valid for searching.
 * Keywords must be at least 3 alphanumeric characters, ignoring empty space.
 * @param keyword - keyword to check
 * @returns boolean
 */
export function isValidKeyword(keyword: string) {
  if (!keyword?.length) {
    return false;
  }

  return /^[a-z0-9]{3,}$/i.test(keyword.replace(/\s/g, ''));
}

/**
 * Converts a camelCase string to Title Case.
 * @param str - string to convert
 * @returns string
 */
export function camelCaseToTitleCase(str: string): string {
  const result = str.replace(/([A-Z0-9])/g, ' $1');
  return result.charAt(0).toUpperCase() + result.slice(1);
}

/**
 * Parses a vector string into an array of vector items.
 * @param str - vector string to parse
 * @returns VectorItem[]
 */
export function parseVectorString(str: string): VectorItem[] {
  const keyValuePairs = str.split('/');
  const items: VectorItem[] = [];

  for (const pair of keyValuePairs) {
    const [vectorKey, valueKey] = pair.split(':');
    const vector = VECTOR_MAP.find(v => v.shorthand === vectorKey);

    if (!vector) {
      continue;
    }
    items.push({
      name: vector.name,
      value: vector.values[valueKey] || 'Unknown',
    });
  }

  return items;
}
