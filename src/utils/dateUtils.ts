import { TimeSpan } from '../types/TimeSpan.enum';

/**
 * Checks if a date string is a valid ISO date.
 * @param date - date string to check
 * @returns boolean
 */
function isValidISODate(date: string) {
  return !isNaN(Date.parse(date));
}

/**
 * Formats a date string into a human-readable format.
 * @param date - date string to format
 * @returns string
 */
export function toHumanReadableDate(date: string) {
  if (!isValidISODate(date)) {
    return date;
  }

  return date.split('T')[0];
}

/**
 * Takes a TimeSpan and returns a Date object representing a start date.
 * Used when querying for CVEs.
 * @param timeSpan - time span to get start date for
 * @param now - current date
 * @returns Date
 * @throws Error
 */
export function getCveQueryPubStartDate(
  timeSpan: TimeSpan,
  now: Date = new Date()
): Date {
  // normalize to midnight
  const normalizedNow = new Date(
    now.getFullYear(),
    now.getMonth(),
    now.getDate()
  );

  switch (timeSpan) {
    case TimeSpan.Last24Hours:
      return new Date(normalizedNow.getTime() - 24 * 60 * 60 * 1000);
    case TimeSpan.Last48Hours:
      return new Date(normalizedNow.getTime() - 48 * 60 * 60 * 1000);
    case TimeSpan.Last7Days:
      return new Date(normalizedNow.getTime() - 7 * 24 * 60 * 60 * 1000);
    case TimeSpan.Last30Days:
      return new Date(normalizedNow.getTime() - 30 * 24 * 60 * 60 * 1000);
    case TimeSpan.Last90Days:
      return new Date(normalizedNow.getTime() - 90 * 24 * 60 * 60 * 1000);
    case TimeSpan.Last120Days:
      return new Date(normalizedNow.getTime() - 120 * 24 * 60 * 60 * 1000);
    default:
      throw new Error(`Invalid time span: ${timeSpan}`);
  }
}
